stages:
  - stage: 'code_quality'
    displayName: 'Code Quality Checks'

    jobs:
      - job: 'cpp_checks'
        displayName: 'C++ Checks'
        pool:
          vmImage: 'ubuntu-18.04'
        steps:
          - bash: |
              set -ex
              sudo apt-get remove --yes clang libllvm6.0
              sudo add-apt-repository --yes 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main'
              sudo apt-get update
              sudo apt-get install --yes clang-format-6.0
            displayName: 'Install tooling'
          - bash: |
              set -ex
              clang-format-6.0 --version
              find . -type f -regex '.*\.\(c\|cpp\|h\|hpp\)' -not -path './common/include/scipp/common/span/*' | xargs clang-format-6.0 -i
              git diff
              git diff --quiet
            displayName: 'Run clang-format'

      - job: 'cmake_checks'
        displayName: 'CMake Checks'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
              architecture: 'x64'
          - script: pip install cmake_format==0.6.9
            displayName: 'Install tooling'
          - bash: |
              set -ex
              cmake-format --version
              find . -type f -name CMakeLists.txt -or -name '*.cmake' | xargs cmake-format --check
            displayName: 'Run cmake-format'

      - job: 'copyright_year'
        displayName: 'Copyright Year'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - bash: |
              set -ex
              find . -type f -not -path '.git/*' -exec sed -ri "s/[0-9]* (Scipp contributors)/$(date +%Y) \1/g" {} +
              git diff
              git diff --quiet
            displayName: 'Check Copyright years are up to date'

      - job: 'python_checks'
        displayName: 'Python Checks'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
              architecture: 'x64'
          - script: pip install flake8 yapf==0.29.0
            displayName: 'Install tooling'
          - bash: |
              set -ex
              flake8 --version
              find . -type f -name '*.py' | xargs flake8
            displayName: 'Run flake8'
          - bash: |
              set -ex
              yapf --version
              yapf --diff --recursive 'python'
            displayName: 'Run yapf'
